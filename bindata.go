// Code generated by go-bindata.
// sources:
// ui/index.tmpl
// ui/scripts/app.js
// ui/styles/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x53\x4b\xae\xdb\x30\x0c\xdc\x17\xe8\x1d\x06\x5e\x07\xf6\x05\x9c\xac\xda\x5d\xb7\x3d\x00\x23\x31\x31\x5f\xf5\x8b\x48\x19\xc9\xed\x0b\xc5\x7e\x0f\xc6\xf3\xc6\xd2\x90\x26\x39\xc3\xf1\xbc\x58\x0c\x97\x9f\x3f\x00\x60\x5e\x98\xfc\x7e\x7e\xdf\x4d\x2c\xf0\xc5\x93\x2e\xfe\x0a\x51\xb8\x1c\x25\xdd\xe7\x69\xc3\x0f\x89\x41\xd2\x3f\x54\x0e\xe7\x41\xed\x15\x58\x17\x66\x1b\x60\xaf\xc2\xe7\xc1\xf8\x69\x93\x53\x1d\xb0\x54\xbe\x9d\x87\xa9\xc9\xb4\x65\x6d\xaf\xb1\xc7\x3e\x27\x98\x0e\x23\xcc\xd7\xec\x5f\xc7\x2e\x5e\x56\xb8\x40\xaa\xe7\xc1\xe5\x64\x9c\x6c\x38\x84\xdf\x29\xe5\x1b\xd0\x9f\x3f\xb9\x72\x84\x14\x6d\x11\x3e\x87\x5c\xa1\x62\xa0\xc8\x76\x82\xcb\x49\xd9\x19\x5b\xab\x20\x2f\x45\xd4\x49\xba\x83\x83\xd8\x09\xca\x1e\x3e\x83\xa5\x69\xcc\x1e\xc6\xb1\xe4\x0a\x49\x4e\xbc\xf8\x96\x0c\xcd\x10\xe8\x9a\x2b\x83\x6d\x2b\xcd\x88\x74\x4f\x04\x0a\xf2\x68\x34\xe2\xaf\x81\x93\x44\x90\x47\x94\x7e\x58\x39\x09\xc5\x13\x1e\x4d\x14\x29\xab\xd5\xe6\xc1\x4f\xae\x4e\x8c\x4c\x72\x42\x0b\x81\xa2\xcb\x5b\xe5\x9e\x24\x2a\xbd\xd3\xbb\xa4\x14\xf0\x13\x4c\x7d\x15\x31\xfb\xbc\x11\x78\x34\xb2\x11\xbf\x7a\x49\x6a\xc6\x90\xda\x2a\xef\x5c\x25\xa1\x72\xa9\xbc\x70\xf2\x5c\xc5\x3a\xb0\xe6\xd0\x8a\x91\x31\xd6\xce\x14\xac\xca\x70\x12\xc2\xa7\x42\x0c\x6e\xb8\xb5\xbb\x90\x21\xf5\x81\x50\xa8\x0a\x59\xab\x23\x7e\x3f\x1d\x17\xe3\xd6\x65\x4c\x86\xec\x1c\xb1\x23\x83\x6b\x45\x3c\x59\xff\x22\x27\x94\x9a\xc5\x73\xea\x2a\x76\xa5\x24\xc1\xb5\x50\xa8\xf3\x46\xbe\xdd\xc4\x09\xc1\xb3\x72\xed\xd1\x98\x43\x1f\x83\xba\x40\xe2\xc1\xba\xeb\xda\xe2\xf8\x6d\xbf\xd3\x71\xc1\xf3\xe4\x65\x3d\xde\xd5\x55\x29\x76\xf4\xdd\x07\xad\xb4\xa1\x03\xb4\xba\xdd\x7d\x6f\x40\x27\x2a\x65\xfc\xd0\xe1\x32\xef\xc8\x97\x09\x77\xe3\xcd\xd3\xfb\xe7\xf8\x1f\x00\x00\xff\xff\x43\x25\xb3\x6d\x23\x03\x00\x00")

func uiIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_uiIndexTmpl,
		"ui/index.tmpl",
	)
}

func uiIndexTmpl() (*asset, error) {
	bytes, err := uiIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/index.tmpl", size: 803, mode: os.FileMode(438), modTime: time.Unix(1507213106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiScriptsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\x2b\xce\xcf\x49\xd5\xcb\xc9\x4f\xd7\x50\xcf\x2a\x56\x48\xcb\xcc\x49\x55\xc8\xc9\x4f\x4c\x49\x4d\x51\xd7\x04\x04\x00\x00\xff\xff\x6d\x4b\xf3\x75\x1d\x00\x00\x00")

func uiScriptsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_uiScriptsAppJs,
		"ui/scripts/app.js",
	)
}

func uiScriptsAppJs() (*asset, error) {
	bytes, err := uiScriptsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/scripts/app.js", size: 29, mode: os.FileMode(438), modTime: time.Unix(1507207317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiStylesStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\xce\xcf\x2b\x49\xcd\x2b\x51\xa8\xe6\xe5\x52\x50\x50\x50\x48\x4a\x4c\xce\x4e\x2f\xca\x2f\xcd\x4b\xd1\x4d\xce\xcf\xc9\x2f\xb2\x52\x48\xcc\x2b\xc9\x2c\x2c\x4d\x2d\xcf\xc8\x2c\x49\xb5\x86\x28\x2a\xcf\x4c\x29\xc9\xb0\x52\x30\x36\x50\xb5\xe6\xe5\xaa\x05\x04\x00\x00\xff\xff\x72\x6f\x6e\x55\x43\x00\x00\x00")

func uiStylesStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_uiStylesStyleCss,
		"ui/styles/style.css",
	)
}

func uiStylesStyleCss() (*asset, error) {
	bytes, err := uiStylesStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/styles/style.css", size: 67, mode: os.FileMode(438), modTime: time.Unix(1507208637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/index.tmpl": uiIndexTmpl,
	"ui/scripts/app.js": uiScriptsAppJs,
	"ui/styles/style.css": uiStylesStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{uiIndexTmpl, map[string]*bintree{}},
		"scripts": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{uiScriptsAppJs, map[string]*bintree{}},
		}},
		"styles": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{uiStylesStyleCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

